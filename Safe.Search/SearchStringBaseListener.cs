//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SearchString\SearchString.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISearchStringListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class SearchStringBaseListener : ISearchStringListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SearchStringParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] SearchStringParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SearchStringParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] SearchStringParser.LineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TextWithoutField</c>
	/// labeled alternative in <see cref="SearchStringParser.part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTextWithoutField([NotNull] SearchStringParser.TextWithoutFieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TextWithoutField</c>
	/// labeled alternative in <see cref="SearchStringParser.part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTextWithoutField([NotNull] SearchStringParser.TextWithoutFieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TextWithField</c>
	/// labeled alternative in <see cref="SearchStringParser.part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTextWithField([NotNull] SearchStringParser.TextWithFieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TextWithField</c>
	/// labeled alternative in <see cref="SearchStringParser.part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTextWithField([NotNull] SearchStringParser.TextWithFieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SearchStringParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterField([NotNull] SearchStringParser.FieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SearchStringParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitField([NotNull] SearchStringParser.FieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OneWord</c>
	/// labeled alternative in <see cref="SearchStringParser.text"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOneWord([NotNull] SearchStringParser.OneWordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OneWord</c>
	/// labeled alternative in <see cref="SearchStringParser.text"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOneWord([NotNull] SearchStringParser.OneWordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SeveralWords</c>
	/// labeled alternative in <see cref="SearchStringParser.text"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSeveralWords([NotNull] SearchStringParser.SeveralWordsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SeveralWords</c>
	/// labeled alternative in <see cref="SearchStringParser.text"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSeveralWords([NotNull] SearchStringParser.SeveralWordsContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
